'use strict';

var app = angular.module('Meaniscule', ['ui.router', 'ngDragDrop']);

app.config(function ($urlRouterProvider, $locationProvider) {
   // This turns off hashbang urls (/#about) and changes it to something normal (/about)
   $locationProvider.html5Mode(true);
   // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
   $urlRouterProvider.otherwise('/');
});
'use strict';

app.directive('fsadraggable', ['$document', function ($document) {
	return {
		link: function link(scope, element, attr) {
			var startX = 0,
			    startY = 0,
			    newX = 0,
			    newY = 0;

			element.css({
				position: 'relative',
				cursor: 'pointer'
			});

			element.bind('drag', function () {
				console.log('drag');
			});

			element.on('mousedown', function (event) {
				event.preventDefault();
				startX = event.pageX - newX;
				startY = event.pageY - newY;
				$document.on('mousemove', dragMouseMove);
				$document.on('mouseup', dragMouseUp);
			});

			function dragMouseMove() {
				newX = event.pageX - startX;
				newY = event.pageY - startY;
				element.css({
					left: newX + 'px',
					top: newY + 'px'
				});
			}

			function dragMouseUp() {
				$document.off('mousemove', dragMouseMove);
				$document.off('mouseup', dragMouseUp);
			}
			console.log(element);
		}
	};
}]);

app.directive('fsaresizeable', ['$document', function ($document) {
	return {
		link: function link(scope, element, attr) {
			var startHeight = element.context.offsetHeight;
			var startWidth = element.context.offsetWidth;
			var topBorder = element.context.offsetTop;
			var bottomBorder = element.context.offsetTop + startHeight;
			var leftBorder = element.context.offsetLeft;
			var rightBorder = element.context.offsetLeft + startWidth;
			var borderWidth = 10;

			element.css({
				position: 'relative'
			});

			element.on('mousedown', function (event) {
				// console.log(attr)
				event.preventDefault();

				if (event.pageX < rightBorder + borderWidth && event.pageX > rightBorder - borderWidth || event.pageY < bottomBorder + borderWidth && event.pageY > bottomBorder - borderWidth) {
					$document.on('mousemove', sizeMouseMove);
					$document.on('mouseup', sizeMouseUp);
				}
			});
			function sizeMouseMove() {
				var newHeight = event.pageY - topBorder;
				var newWidth = event.pageX - leftBorder;
				bottomBorder = topBorder + newHeight;
				rightBorder = leftBorder + newWidth;
				element.css({
					height: newHeight + 'px',
					width: newWidth + 'px'
				});
			}

			function sizeMouseUp() {
				$document.off('mousemove', sizeMouseMove);
				$document.off('mouseup', sizeMouseUp);
			}
		}
	};
}]);

app.directive('fsacontainer', ['$document', function ($document) {
	return {
		link: function link(scope, element, attr) {
			// element[0].draggable = true
			element.bind('dragover', function (e) {
				e.preventDefault();
				console.log('e', e);
			});

			/* if mouseenter:
   lookup:
   drop event
   drop end
   	-send data
   check to see if fsadraggable is on the div that is being dragged in*/
		}
	};
}]);
// cursor: 'pointer'
'use strict';

app.controller('HomeController', function ($scope, $timeout, $http) {

  $scope.msgFromScope = '...And I\'m a message from the HomeController scope, just so you know that I work!';

  $scope.list1 = [];
  $scope.list2 = [];
  $scope.list3 = [];
  $scope.list4 = [];

  $scope.list5 = [{ 'title': 'Item 1', 'drag': true }, { 'title': 'Item 2', 'drag': true }, { 'title': 'Item 3', 'drag': true }, { 'title': 'Item 4', 'drag': true }, { 'title': 'Item 5', 'drag': true }, { 'title': 'Item 6', 'drag': true }, { 'title': 'Item 7', 'drag': true }, { 'title': 'Item 8', 'drag': true }];

  // Limit items to be dropped in list1
  $scope.optionsList1 = {
    accept: function accept(dragEl) {
      if ($scope.list1.length >= 2) {
        return false;
      } else {
        return true;
      }
    }
  };
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/app/home/home.html',
        controller: 'HomeController'
    });
});
'use strict';

app.controller('ModulesController', function ($scope, $http, ModulesFactory) {

  $scope.$on('$stateChangeSuccess', function () {
    var defaultMessage = 'If you don\'t see a list of links here, you need to seed your database!\nIn your terminal, go to this app\'s directory and run `gulp seedDB`.\nThen try this page again.';

    ModulesFactory.getNodeModules().then(function (modules) {
      $scope.nodeModules = modules;

      if (!$scope.nodeModules.length) {
        $scope.defaultMessage = defaultMessage;
      }
    });
  });
});
'use strict';

app.factory('ModulesFactory', function ($http) {
  return {
    getNodeModules: function getNodeModules() {
      return $http.get('/api/modules/').then(function (res) {
        return res.data;
      });
    }
  };
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('modules', {
        url: '/modules',
        templateUrl: '/app/modules/modules.html',
        controller: 'ModulesController'
    });
});
"use strict";

app.directive("navbar", function () {
	return {
		restrict: "E",
		templateUrl: "/app/navbar/navbar.html"
	};
});
//# sourceMappingURL=data:application/json;base64,