'use strict';

var app = angular.module('Meaniscule', ['ui.router', 'ngDragDrop']);

app.config(function ($urlRouterProvider, $locationProvider) {
   // This turns off hashbang urls (/#about) and changes it to something normal (/about)
   $locationProvider.html5Mode(true);
   // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
   $urlRouterProvider.otherwise('/');
});
'use strict';

app.directive('fsadraggable', function ($document) {

	return {
		restrict: 'A',
		link: function link(scope, element, attrs) {
			var startX = 0,
			    startY = 0,
			    newX = 0,
			    newY = 0;

			scope.fsasetdata = 'fsasetdata' in attrs;
			if (!!scope.fsasetdata) {
				var data = attrs.fsasetdata;
				var JSONdata = JSON.stringify(data);
			}

			element.css({
				position: 'relative',
				cursor: 'pointer'
			});

			element[0].draggable = true;

			element.bind('dragstart', function (event) {
				startX = event.originalEvent.pageX - newX;
				startY = event.originalEvent.pageY - newY;
				if (data) {
					event.originalEvent.dataTransfer.setData('auto', JSONdata);
				}
			});

			element.bind('drag', function (event) {

				if (event.originalEvent.pageX === 0) {
					// If this isn't here, pageX will reset to 0 upon end of drag
					return;
				}

				newX = event.originalEvent.pageX - startX;
				newY = event.originalEvent.pageY - startY;
			});

			element.bind('dragend', function (event) {

				element.css({
					left: newX + 'px',
					top: newY + 'px'
				});
			});
		},
		scope: {
			fsadata: '@'
		}
	};
});

app.directive('fsaresizeable', ['$document', function ($document) {
	return {
		link: function link(scope, element, attrs) {
			var topBorder, leftBorder, rightBorder, bottomBorder;
			var borderWidth = 10;

			element.css({
				position: 'relative'
			});

			element.on('mousemove', function (event) {

				var topBorder = element[0].offsetTop;
				var leftBorder = element[0].offsetLeft;
				var rightBorder = element[0].offsetLeft + element[0].offsetWidth;
				var bottomBorder = element[0].offsetTop + element[0].offsetHeight;

				var onRightBorderCheck = event.pageX < rightBorder && event.pageX > rightBorder - borderWidth;
				var onBottomBorderCheck = event.pageY < bottomBorder && event.pageY > bottomBorder - borderWidth;

				if (onRightBorderCheck) {
					element.css({
						cursor: 'e-resize'
					});
				} else if (onBottomBorderCheck) {
					element.css({
						cursor: 's-resize'
					});
				}

				if (onRightBorderCheck && onBottomBorderCheck) {
					element.css({
						cursor: 'se-resize'
					});
				}

				if (event.pageX < rightBorder - borderWidth && event.pageY < bottomBorder - borderWidth) {
					element.css({
						cursor: 'pointer'
					});
				}
			});

			element.on('mousedown', function (event) {
				// event.preventDefault()
				// element[0].draggable = false

				var topBorder = element[0].offsetTop;
				var leftBorder = element[0].offsetLeft;
				var rightBorder = element[0].offsetLeft + element[0].offsetWidth;
				var bottomBorder = element[0].offsetTop + element[0].offsetHeight;

				var onRightBorderCheck = event.pageX < rightBorder && event.pageX > rightBorder - borderWidth;
				var onBottomBorderCheck = event.pageY < bottomBorder && event.pageY > bottomBorder - borderWidth;

				if (onRightBorderCheck && onBottomBorderCheck) {
					element[0].draggable = false;
					$document.on('mousemove', adjustWidthHeight);
					$document.on('mouseup', adjustMouseUp);
				}

				if (onRightBorderCheck) {
					element[0].draggable = false;
					$document.on('mousemove', adjustWidth);
					$document.on('mouseup', adjustMouseUp);
				}

				if (onBottomBorderCheck) {
					element[0].draggable = false;
					$document.on('mousemove', adjustHeight);
					$document.on('mouseup', adjustMouseUp);
				}
			});

			element.on('mouseup', function (event) {
				// event.preventDefault()
				element[0].draggable = true;
			});

			function adjustHeight() {
				var newHeight = event.pageY - element[0].offsetTop;

				if (newHeight < borderWidth) {
					newHeight = borderWidth;
				}

				bottomBorder = event.pageY;

				element.css({
					height: newHeight + 'px'
				});
			}

			function adjustWidth() {
				var newWidth = event.pageX - element[0].offsetLeft;

				if (newWidth < borderWidth) {
					newWidth = borderWidth;
				}

				rightBorder = event.pageX;

				element.css({
					width: newWidth + 'px'
				});
			}

			function adjustWidthHeight() {
				var newHeight = event.pageY - element[0].offsetTop;
				var newWidth = event.pageX - element[0].offsetLeft;

				if (newHeight < borderWidth) {
					newHeight = borderWidth;
				}

				if (newWidth < borderWidth) {
					newWidth = borderWidth;
				}

				bottomBorder = event.pageY;
				rightBorder = event.pageX;
				element.css({
					height: newHeight + 'px',
					width: newWidth + 'px'
				});
			}

			function adjustMouseUp() {
				element[0].draggable = true;
				$document.off('mousemove', adjustWidthHeight);
				$document.off('mousemove', adjustWidth);
				$document.off('mousemove', adjustHeight);
				$document.off('mouseup', adjustMouseUp);
			}
		}
	};
}]);

app.directive('fsacontainer', ['$document', function ($document) {
	return {
		link: function link(scope, element, attrs) {
			var data;

			scope.fsagetdata = 'fsagetdata' in attrs;
			if (!!scope.fsagetdata) {
				attrs.fsagetdata = [];
			}

			element.bind('dragover', function (event) {
				event.preventDefault();
			});

			element.bind('drop', function (event) {
				console.log(event.originalEvent.target);
				if (event.originalEvent.dataTransfer.getData('auto') === '') {
					return;
				}
				data = JSON.parse(JSON.parse(event.originalEvent.dataTransfer.getData('auto')));

				if (!!scope.fsagetdata) {
					attrs.fsagetdata.push(data);
				}
			});
		}
	};
}]);
// cursor: 'pointer'
'use strict';

app.controller('HomeController', function ($scope, $timeout, $http) {

  $scope.msgFromScope = '...And I\'m a message from the HomeController scope, just so you know that I work!';

  $scope.controllerdata = {
    test: 'test object from home controller'
  };
});

app.controller('secondController', function ($scope, $timeout, $http, $attrs) {

  $scope.logdata = function () {
    console.log('from the second controller', $attrs.fsagetdata);
  };
  var myReceivedData = $attrs.fsacontainer;
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: '/app/home/home.html',
        controller: 'HomeController'
    });
});
'use strict';

app.controller('ModulesController', function ($scope, $http, ModulesFactory) {

  $scope.$on('$stateChangeSuccess', function () {
    var defaultMessage = 'If you don\'t see a list of links here, you need to seed your database!\nIn your terminal, go to this app\'s directory and run `gulp seedDB`.\nThen try this page again.';

    ModulesFactory.getNodeModules().then(function (modules) {
      $scope.nodeModules = modules;

      if (!$scope.nodeModules.length) {
        $scope.defaultMessage = defaultMessage;
      }
    });
  });
});
'use strict';

app.factory('ModulesFactory', function ($http) {
  return {
    getNodeModules: function getNodeModules() {
      return $http.get('/api/modules/').then(function (res) {
        return res.data;
      });
    }
  };
});
'use strict';

app.config(function ($stateProvider) {
    $stateProvider.state('modules', {
        url: '/modules',
        templateUrl: '/app/modules/modules.html',
        controller: 'ModulesController'
    });
});
"use strict";

app.directive("navbar", function () {
	return {
		restrict: "E",
		templateUrl: "/app/navbar/navbar.html"
	};
});
//# sourceMappingURL=data:application/json;base64,